<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Tomohisa Oda</title><link href="undefined/atom.xml" rel="self" /><link /><updated>2012-03-20T14:10:01Z</updated><id></id><author><name>Tomohisa Oda</name><email>linyows@gmail.com</email></author><entry><title>S3のAPI"Delete Multiple Objects"をknoxに実装した</title><link href="/posts/2012/delete_multilpe_objects.html" /><updated>2012-03-20T12:26:13Z</updated><id>/posts/2012/delete_multilpe_objects.html</id><summary type="html">S3のAPI"Delete Multiple Objects"をknoxに実装した去年末、AWS S3にオブジェクトの一括削除APIが実装されたので、使用しようとおもったらKnoxは未実装だったので対応してpull-request送った。AWS Documentation - Delete Multiple Objec...</summary><content type="html"><![CDATA[ <h1>S3のAPI"Delete Multiple Objects"をknoxに実装した</h1>

<p>去年末、AWS S3にオブジェクトの一括削除APIが実装されたので、使用しようとおもったらKnoxは未実装だったので対応してpull-request送った。</p>

<ul>
<li>AWS Documentation - Delete Multiple Objects <a href='http://docs.amazonwebservices.com/AmazonS3/latest/API/multiobjectdeleteapi.html'>http://docs.amazonwebservices.com/AmazonS3/latest/API/multiobjectdeleteapi.html</a></li>
<li>Knox <a href='https://github.com/LearnBoost/knox'>https://github.com/LearnBoost/knox</a></li>
</ul>

<p>Delte Multiple Objects について後で追記する</p> ]]></content></entry><entry><title>JekyllのNode版であるDocpadを使ってみる</title><link href="/posts/2012/using_docpad.html" /><updated>2012-03-20T08:27:47Z</updated><id>/posts/2012/using_docpad.html</id><summary type="html">JekyllのNode版であるDocpadを使ってみるなんか巷では、jekyll, octpress が流行っているっぽい。完全に乗り遅れたので、いや乗るつもりも無かったけど、node弄るのが比較的楽しいので、node.js版 jekyll の Docpadを使ってブログをはじめてみる。Docpad https://g...</summary><content type="html"><![CDATA[ <h1>JekyllのNode版であるDocpadを使ってみる</h1>

<p>なんか巷では、<a href="http://jekyllrb.com/">jekyll</a>, <a href="http://octopress.org/">octpress</a> が流行っているっぽい。完全に乗り遅れたので、いや乗るつもりも無かったけど、<a href="http://nodejs.org/">node</a>弄るのが比較的楽しいので、node.js版 jekyll の Docpadを使ってブログをはじめてみる。</p>

<ul>
<li>Docpad <a href='https://github.com/bevry/docpad'>https://github.com/bevry/docpad</a></li>
<li>Docpadを使ったサイト <a href='https://github.com/bevry/docpad/wiki/Showcase'>https://github.com/bevry/docpad/wiki/Showcase</a></li>
</ul>

<h2>Install</h2>

<p>docpadは、coffee-scriptで実装されていて、まずmacにcoffeeと一緒にインストールする。<code>-g</code>オプションはgloballyで<code>/usr/local/bin/*</code>にインストールする。</p>

<pre>
$ npm install -g coffee-script docpad
</pre>

<p>プロジェクト用のディレクトリに移動し、<code>run</code>コマンドではじめる。<code>run</code>コマンドは、全てのコマンドを実行してくれるみたいで、<em>2回目以降実行するとエラーが出る</em>。ドキュメントにある通り最初の1回用っぽい。</p>

<p>実行したらどのスケルトンを使うか聞かれるので選択する。Twitter's Bootstrap使うと<em>それ臭さがにじみ出てキモイ</em>ので、何もスタイル無しの状態を選択。</p>

<pre>
$ docpad run
info: Welcome to DocPad v3.3.0
You are about to create your new project inside your current directory. Below is a list of skeletons to bootstrap your new project:

        canvas.docpad
        The Blank Canvas Skeleton for DocPad. Your web development playground.

        kitchensink.docpad
        Kitchensink Skeleton for DocPad, based off Twitter's Bootstrap

Which skeleton will you use?
  1) canvas.docpad
  2) kitchensink.docpad
  :
</pre>

<p>すると必要なモジュールがインストールされて、サーバーが<code>localhost:9778</code>に起動する。記事書いて確認したりするには、<code>$ docpad cli</code>が<em>便利かも</em>。docpadのコマンドをそのまま叩ける状態になるので、<code>server</code>と<code>watch</code>を叩く事で更新をlocalhostで確認しやすい。</p>

<pre>
$ docpad cli
info: Welcome to DocPad v3.3.0
What would you like to do now?
> server
info: DocPad listening to <a href='http://localhost:9778/'>http://localhost:9778/</a> with directory /Users/foo/Projects/bar/out
info: The action completed successfully

What would you like to do now?
> watch
info: Watching setup starting...
info: Watching setup
info: The action completed successfully

What would you like to do now?
>
</pre>

<p>こんな風に対話式にコマンドを叩ける。<code>watch</code>はファイルの更新を検知してずっとビルドしてくれる。</p>

<h2>記事を書く</h2>

<p>以下は、ディレクトリ構成。</p>

<pre>
├── README.md
├── node_modules
│   ├── coffee-script
│   ├── docpad
│   ├── express
│   ├── moment
│   └── underscore
├── out
│   ├── images
│   ├── index.html
│   ├── scripts
│   ├── styles
│   └── vendor
├── package.json
├── plugins
└── src
    ├── documents
    │   ├── index.html.coffee
    │   ├── posts
    │   ├── scripts
    │   └── styles
    ├── layouts
    │   └── default.html.coffee
    └── public
        ├── images
        └── vendor
</pre>

<p>outは、docpadが出力する静的ファイル群で、基本src配下を弄る。スクリプトを書くにはCoffee以外にRoyやMoveも使えるみたいで、Markupには、Markdown以外にEcoやJade, Hamlとかいけるみたい。Styleは、Stylus, Less, Sassなどが使える。とりあえず、記事はpostsディレクトリをほってそこにmarkdownファイルを作っていく事にし、レイアウトやフロントページは、記事一覧表示するのでCoffeeで書いた。Styleは、みんな知ってるLearnBoostのTJ Holowaychuk aka <strong>visionmedia製 Stylus</strong>にしてみた。</p>

<ul>
<li>CoffeeScript <a href='http://coffeescript.org/'>http://coffeescript.org/</a></li>
<li>Markdown <a href='http://daringfireball.net/projects/markdown/'>http://daringfireball.net/projects/markdown/</a></li>
<li>Stylus <a href='http://learnboost.github.com/stylus/'>http://learnboost.github.com/stylus/</a></li>
</ul>

<h2>Deploy</h2>

<p>GitHubをoriginリポジトリにして、<em>pushしたらwebhookでGitHubからpullするようにしてdeploy</em>するようにした。Deploy先にリモートリポジトリ作っても良かったけどそこにpushするのがめんどかったのでwebhookにしたけど、<em>もっといいやり方があれば誰か教えて欲しい</em>。</p>

<ul>
<li>Github repository <a href='https://github.com/linyows/tomohisaoda.com'>https://github.com/linyows/tomohisaoda.com</a></li>
</ul> ]]></content></entry></feed>