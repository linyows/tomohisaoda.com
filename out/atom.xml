<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Tomohisa Oda</title><link href="http://tomohisaoda.com/atom.xml" rel="self" /><link href="http://tomohisaoda.com" /><updated>2012-05-15T14:41:07Z</updated><id>http://tomohisaoda.com</id><author><name>Tomohisa Oda</name><email>linyows@gmail.com</email></author><entry><title>S3 の画像をリアルタイムにリサイズするServer書いた</title><link href="http://tomohisaoda.com/posts/2012/created_realtime_resizing_image_server.html" /><updated>2012-05-04T00:00:00Z</updated><id>http://tomohisaoda.com/posts/2012/created_realtime_resizing_image_server.html</id><summary type="html">S3の画像をリアルタイムにリサイズするServer書いたS3に配置した画像をURLから指定したサイズにリサイズできるリアルタイムリサイズサーバをnodeで書いた。Featuresスケーラブルでハイパフォーマンス。導入はとっても簡単。複数のバケットが使える。賢いキャッシュ。（ファイルサイズと更新日から304を返す）Arc...</summary><content type="html"><![CDATA[ <h1>S3の画像をリアルタイムにリサイズするServer書いた</h1>

<p>S3に配置した画像を<strong>URLから指定したサイズ</strong>にリサイズできるリアルタイムリサイズサーバをnodeで書いた。</p>

<h2>Features</h2>

<ul>
<li>スケーラブルでハイパフォーマンス。</li>
<li>導入はとっても簡単。</li>
<li>複数のバケットが使える。</li>
<li>賢いキャッシュ。（ファイルサイズと更新日から304を返す）</li>
</ul>

<h2>Architecture</h2>

<p>1台構成</p>

<div class="highlight"><pre lang="console">+---------+      +------------+      +------------+      +----+
| Browser | <--> | CloudFront | <--> | EC2 (hose) | <--> | S3 |
+---------+      +------------+      +------------+      +----+
</pre></div>

<p>スケールアウト</p>

<div class="highlight"><pre lang="console">                                                  +------------+
                                                  | EC2 (hose) |
+---------+      +------------+      +-----+      +------------+      +----+
| Browser | <--> | CloudFront | <--> | ELB | <-->                <--> | S3 |
+---------+      +------------+      +-----+      +------------+      +----+
                                                  | EC2 (hose) |
                                                  +------------+
</pre></div>

<ul>
<li>SSLに対応していないので、ELBとhoseの間に<em>NGINXなどを挟んだ方がいい</em>。</li>
</ul>

<h2>Url</h2>

<div class="highlight"><pre lang="console">//hose.com/bucket/key/100x50cq75/802a393d7247aa0caf9056223503bdf611d478ee.jpg
</pre></div>

<ul>
<li>bucketは、<em>configファイルに書けば</em>省略することができる。</li>
<li>keyは、拡張子ナシのS3のキーで、<em>指定バケットのファイルまでのパス</em>。</li>
<li>100x100cq75は、width x hight crop quality の組み合わせ。</li>
<li>最後のファイル名は、S3のプライベートキーで作成した<em>HMAC</em>と拡張子。</li>
</ul>

<h2>This is called "hose"</h2>

<p>プロジェクト名は"hose"。最近、<a href="https://twitter.com/#!/gosukenator">@gosukenator</a>さんからこの"hose"にPull Requestもらって、一昨年に書いて放置してたのをリファクタリングしたのでブログで告知です。(テストをまだ書いてないのでまだ微妙) ほんと、<em>Pull Requestってモチベーションあがる</em>よね、すごいいい仕組み！自分もできるだけほかのプロジェクトにPull Requestしていこうと思う。</p>

<p>"hose"はそもそもcookpad <a href="https://twitter.com/#!/mirakui">@mirakui</a>さんの<a href="http://www.slideshare.net/mirakui/ss-8150494">tofuのスライド</a>を見たのがきっかけ。Railsアプリケーションとかだと、<a href="https://github.com/thoughtbot/paperclip">Paperclip</a>使うのがお手軽だったりするんだけど、画像サイズが固定だったりするから後でサイズを変更したいときは、バッチでリサイズ処理やったりと結構大変。また、Applicationサーバでリサイズ処理をやるのはそもそもリソースがもったいないよね。そこで"hose"なら全部解決できるってわけ。</p>

<p>特に、<em>AWS使うなら絶対に便利</em>だと思うので、たくさんの人に使ってもらいたい。</p>

<p>hose - <a href='https://github.com/linyows/hose'>https://github.com/linyows/hose</a></p>

<p>なんか、バグ見っけたらGithubにIssue登録お願いします。もしくは、<em>Pull Request</em>お願いします。</p> ]]></content></entry><entry><title>GithubでWikiを検索するUserScript書いた</title><link href="http://tomohisaoda.com/posts/2012/created_github_wiki_search.html" /><updated>2012-04-03T00:00:00Z</updated><id>http://tomohisaoda.com/posts/2012/created_github_wiki_search.html</id><summary type="html">GithubでWikiを検索するUserScript書いたGithubをがっつり使ってると、Wikiに仕様書いたりFAQや依存するModule書いたりと、Wikiを利用する機会は結構あって、Issueやソースコードには検索機能があるのに、Wikiには何故かないんだよね。Github内での優先順位が低いのかな？最初は、@...</summary><content type="html"><![CDATA[ <h1>GithubでWikiを検索するUserScript書いた</h1>

<p>Githubをがっつり使ってると、Wikiに仕様書いたりFAQや依存するModule書いたりと、Wikiを利用する機会は結構あって、Issueやソースコードには検索機能があるのに、Wikiには何故かないんだよね。Github内での優先順位が低いのかな？</p>

<p>最初は、<a href="https://twitter.com/#!/morygonzalez">@morygonzalez</a>に「Wiki内って検索出来ないけどどうすんの？」って言われて、「cloneして<code>ack</code>叩けば？」って言ったものの、ターミナルアレルギーなデザイナーは仕方ないとして、自分も他プロジェクトのをいちいちcloneして探すのは確かに面倒だなあと思ったわけ。<br />なので、UserScriptを書いてみてGithub Wikiの全文検索がうまくいったのでお知らせしてみる。</p>

<p>Github Wiki Search - <a href='https://github.com/linyows/github-wiki-search'>https://github.com/linyows/github-wiki-search</a></p>

<p>なんか、バグ見っけたらGithubにIssue登録お願いします。もしくは、<em>Pull Request</em>お願いします。</p>

<h2>Screenshots</h2>

<p><img src="https://github.com/linyows/github-wiki-search/raw/master/images/1.png" alt="screenshot1" title="" /></p>

<p>ページ右上に検索ボックス。</p>

<p><img src="https://github.com/linyows/github-wiki-search/raw/master/images/2.png" alt="screenshot2" title="" /></p>

<p>検索ワードを入力して<code>Enter</code>したら検索開始。</p>

<p><img src="https://github.com/linyows/github-wiki-search/raw/master/images/3.png" alt="screenshot3" title="" /></p>

<p>検索結果は、非同期で見つかった順に表示。</p>

<h2>Logic</h2>

<p>生のjsガリガリ書くのは面倒だったのでjQueryを使った。</p>

<p>以下、コード中やってること。</p>

<ol>
<li>PagesタブにWikiの<em>全てのページのリンクがある</em>ので<code>GET</code>してページのURLリストを作成。</li>
<li>URLリストからコンテンツを<code>GET</code>して、検索文字をgrep。</li>
<li>grepしてmatchしたら結果表示しつつ、次のコンテンツを<code>GET</code>してgrepを繰り返す。</li>
</ol>

<p>補足</p>

<ul>
<li>１度全ページロードしたらキャッシュしてる。ロードの状態は、プログレスバーで視覚的に分かるようにした。</li>
<li>検索結果表示数が多いと もともと何のページか分からなくなるのであえて少なくしてる。（Wikiってそんなにページ数少ないし...）</li>
</ul>

<h2>Install</h2>

<p>インストールは、<strong>userscripts.org</strong>に登録してるので<em>Install</em>ボタンからどうぞ。</p>

<p><a href='http://userscripts.org/scripts/show/129930'>http://userscripts.org/scripts/show/129930</a></p>

<p>ブラウザは、以下で一通り動作するのを確認済み。</p>

<ul>
<li>Chrome</li>
<li>Firefox - need <a href="https://addons.mozilla.org/ja/firefox/addon/greasemonkey/">Greasemonekey</a></li>
<li>Safari - need <a href="http://d.hatena.ne.jp/os0x/20100612/1276330696">NinjaKit</a></li>
</ul> ]]></content></entry><entry><title>gitのtagをいい感じに削除するshell書いた</title><link href="http://tomohisaoda.com/posts/2012/git_tag_cleaning_shell.html" /><updated>2012-03-25T00:00:00Z</updated><id>http://tomohisaoda.com/posts/2012/git_tag_cleaning_shell.html</id><summary type="html">gitのtagをいい感じに削除するshell書いたGit使ってたらリリースの度にtagをきるんだけどいつの間にかtagの量がスゴいことになってくる。んで、増えすぎたtagを必要なものを残して削除するわけだけど手動で管理してたら面倒だからshell書いた。どんないい感じにしてくれるかと言うと、各マイナーマージョンの最新と...</summary><content type="html"><![CDATA[ <h1>gitのtagをいい感じに削除するshell書いた</h1>

<p>Git使ってたらリリースの度にtagをきるんだけどいつの間にかtagの量がスゴいことになってくる。んで、増えすぎたtagを必要なものを残して削除するわけだけど手動で管理してたら面倒だからshell書いた。<br />どんないい感じにしてくれるかと言うと、</p>

<p><strong>各マイナーマージョンの最新</strong>と<strong>現バージョンの全て</strong>を<em>残して削除</em>する感じ。</p>

<p>gist: <a href='https://gist.github.com/2156669'>https://gist.github.com/2156669</a></p>

<h2>Usage</h2>

<p>dry-run。削除対象tagを確認することが出来る。</p>

<pre>
$ ./git_tag test
</pre>

<p>ローカルリポジトリもリモートも削除...</p>

<pre>
$ ./git_tag clean
</pre>

<h2>Little Sucker</h2>

<ul>
<li><code>6.12.7</code>みたいなフォーマットしか対応してない。<code>v2.3.12</code>とかのprefixに対応してない。</li>
<li>ローカルもリモートも消してしまう</li>
</ul>

<p>もっとスマートなやり方があるだろうし<em>shellで書かなくても...</em>って言う気はするけど取り急ぎ書いた。ちゃんと書きたくなったらそのとき考よう。</p> ]]></content></entry><entry><title>S3のAPI"Delete Multiple Objects"をknoxに実装した</title><link href="http://tomohisaoda.com/posts/2012/delete_multilpe_objects.html" /><updated>2012-03-07T00:00:00Z</updated><id>http://tomohisaoda.com/posts/2012/delete_multilpe_objects.html</id><summary type="html">S3のAPI"Delete Multiple Objects"をknoxに実装した去年末、AWS S3にオブジェクトの一括削除APIが実装されたので、使用しようとおもったらKnoxは未実装だったので対応してpull-request送った。AWS Documentation - Delete Multiple Objec...</summary><content type="html"><![CDATA[ <h1>S3のAPI"Delete Multiple Objects"をknoxに実装した</h1>

<p>去年末、AWS S3にオブジェクトの一括削除APIが実装されたので、使用しようとおもったらKnoxは未実装だったので対応してpull-request送った。</p>

<ul>
<li>AWS Documentation - Delete Multiple Objects <a href='http://docs.amazonwebservices.com/AmazonS3/latest/API/multiobjectdeleteapi.html'>http://docs.amazonwebservices.com/AmazonS3/latest/API/multiobjectdeleteapi.html</a></li>
<li>Knox <a href='https://github.com/LearnBoost/knox'>https://github.com/LearnBoost/knox</a></li>
</ul>

<p>Delte Multiple Objects について後で追記する</p> ]]></content></entry><entry><title>JekyllのNode版であるDocpadを使ってみる</title><link href="http://tomohisaoda.com/posts/2012/using_docpad.html" /><updated>2012-03-01T00:00:00Z</updated><id>http://tomohisaoda.com/posts/2012/using_docpad.html</id><summary type="html">JekyllのNode版であるDocpadを使ってみるなんか巷では、jekyll, octpress が流行っているっぽい。完全に乗り遅れたので、いや乗るつもりも無かったけど、node弄るのが比較的楽しいので、node.js版 jekyll の Docpadを使ってブログをはじめてみる。Docpad https://g...</summary><content type="html"><![CDATA[ <h1>JekyllのNode版であるDocpadを使ってみる</h1>

<p>なんか巷では、<a href="http://jekyllrb.com/">jekyll</a>, <a href="http://octopress.org/">octpress</a> が流行っているっぽい。完全に乗り遅れたので、いや乗るつもりも無かったけど、<a href="http://nodejs.org/">node</a>弄るのが比較的楽しいので、node.js版 jekyll の Docpadを使ってブログをはじめてみる。</p>

<ul>
<li>Docpad <a href='https://github.com/bevry/docpad'>https://github.com/bevry/docpad</a></li>
<li>Docpadを使ったサイト <a href='https://github.com/bevry/docpad/wiki/Showcase'>https://github.com/bevry/docpad/wiki/Showcase</a></li>
</ul>

<h2>Install</h2>

<p>docpadは、coffee-scriptで実装されていて、まずmacにcoffeeと一緒にインストールする。<code>-g</code>オプションはgloballyで<code>/usr/local/bin/*</code>にインストールする。</p>

<pre>
$ npm install -g coffee-script docpad
</pre>

<p>プロジェクト用のディレクトリに移動し、<code>run</code>コマンドではじめる。<code>run</code>コマンドは、全てのコマンドを実行してくれるみたいで、<em>2回目以降実行するとエラーが出る</em>。ドキュメントにある通り最初の1回用っぽい。</p>

<p>実行したらどのスケルトンを使うか聞かれるので選択する。Twitter's Bootstrap使うと<em>それ臭さがにじみ出てキモイ</em>ので、何もスタイル無しの状態を選択。</p>

<pre>
$ docpad run
info: Welcome to DocPad v3.3.0
You are about to create your new project inside your current directory. Below is a list of skeletons to bootstrap your new project:

        canvas.docpad
        The Blank Canvas Skeleton for DocPad. Your web development playground.

        kitchensink.docpad
        Kitchensink Skeleton for DocPad, based off Twitter's Bootstrap

Which skeleton will you use?
  1) canvas.docpad
  2) kitchensink.docpad
  :
</pre>

<p>すると必要なモジュールがインストールされて、サーバーが<code>localhost:9778</code>に起動する。記事書いて確認したりするには、<code>$ docpad cli</code>が<em>便利かも</em>。docpadのコマンドをそのまま叩ける状態になるので、<code>server</code>と<code>watch</code>を叩く事で更新をlocalhostで確認しやすい。</p>

<pre>
$ docpad cli
info: Welcome to DocPad v3.3.0
What would you like to do now?
> server
info: DocPad listening to <a href='http://localhost:9778/'>http://localhost:9778/</a> with directory /Users/foo/Projects/bar/out
info: The action completed successfully

What would you like to do now?
> watch
info: Watching setup starting...
info: Watching setup
info: The action completed successfully

What would you like to do now?
>
</pre>

<p>こんな風に対話式にコマンドを叩ける。<code>watch</code>はファイルの更新を検知してずっとビルドしてくれる。</p>

<h2>記事を書く</h2>

<p>以下は、ディレクトリ構成。</p>

<pre>
├── README.md
├── node_modules
│   ├── coffee-script
│   ├── docpad
│   ├── express
│   ├── moment
│   └── underscore
├── out
│   ├── images
│   ├── index.html
│   ├── scripts
│   ├── styles
│   └── vendor
├── package.json
├── plugins
└── src
    ├── documents
    │   ├── index.html.coffee
    │   ├── posts
    │   ├── scripts
    │   └── styles
    ├── layouts
    │   └── default.html.coffee
    └── public
        ├── images
        └── vendor
</pre>

<p>outは、docpadが出力する静的ファイル群で、基本src配下を弄る。スクリプトを書くにはCoffee以外にRoyやMoveも使えるみたいで、Markupには、Markdown以外にEcoやJade, Hamlとかいけるみたい。Styleは、Stylus, Less, Sassなどが使える。とりあえず、記事はpostsディレクトリをほってそこにmarkdownファイルを作っていく事にし、レイアウトやフロントページは、記事一覧表示するのでCoffeeで書いた。Styleは、みんな知ってるLearnBoostのTJ Holowaychuk aka <strong>visionmedia製 Stylus</strong>にしてみた。</p>

<ul>
<li>CoffeeScript <a href='http://coffeescript.org/'>http://coffeescript.org/</a></li>
<li>Markdown <a href='http://daringfireball.net/projects/markdown/'>http://daringfireball.net/projects/markdown/</a></li>
<li>Stylus <a href='http://learnboost.github.com/stylus/'>http://learnboost.github.com/stylus/</a></li>
</ul>

<h2>Deploy</h2>

<p>GitHubをoriginリポジトリにして、<em>pushしたらwebhookでGitHubからpullするようにしてdeploy</em>するようにした。Deploy先にリモートリポジトリ作っても良かったけどそこにpushするのがめんどかったのでwebhookにしたけど、<em>もっといいやり方があれば誰か教えて欲しい</em>。</p>

<ul>
<li>Github repository <a href='https://github.com/linyows/tomohisaoda.com'>https://github.com/linyows/tomohisaoda.com</a></li>
</ul>

<hr />

<p>P.S. - April 3, 2012</p>

<p>DocpadのShowcaseで、この記事 と このサイト が紹介されてたみたい。<br /><a href='https://github.com/bevry/docpad/wiki/Showcase'>https://github.com/bevry/docpad/wiki/Showcase</a></p>

<p>Thanks!</p> ]]></content></entry></feed>